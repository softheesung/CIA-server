<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> 
<mapper namespace="note">	
	
	
	
	<select id="getRoomInfo" parameterType="java.lang.Integer" resultType="com.hs.app.note.vo.RoomInfo">
		select * from hs_notes_room where idx = #{roomIdx}
	</select>
	
	<select id="getMyRoomSize" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(*) from (
			select idx from 
			(
				select 
					b.idx as idx,
					a.idx as roomIdx
				from 
					hs_notes as b,
					hs_notes_room as a
				where 
					a.idx = b.roomIdx
				and
					a.toUserIdx = #{toUserIdx} 
			) as HS
			group by roomIdx
		) as HEESUNG
	</select>
	<select id="getMyRoomList" parameterType="java.util.Map" resultType="com.hs.app.note.vo.RoomInfo">
		select * from 
		(
			select 
				b.idx as idx,
				a.idx as roomIdx,
				a.fromUserIdx as fromUserIdx,
				(select name from hs_user_info where idx = a.fromUserIdx) as fromName,
				(select img from hs_user_info where idx = a.fromUserIdx) as fromImg,
				a.toUserIdx as toUserIdx,
				b.sendtime as sendtime,
				msg,
				readFlag
			from 
				hs_notes as b,
				hs_notes_room as a
			where 
				a.idx = b.roomIdx
			and
				a.toUserIdx = #{toUserIdx} 
			order by 
				b.idx desc 
		) as HS
		group by roomIdx
		order by idx desc
		limit #{startRow}, #{rowBlockCount}
	</select>
	
	
	
	
	
	
	<!-- idx보다 최신 게시물 쿼리 -->
	<select id="getMyRecentNoteList" parameterType="java.util.Map" resultType="com.hs.app.note.vo.NoteInfo">
		select 
            idx,			
			msg,
			toUserIdx,
			fromUserIdx,
			DATE_FORMAT(sendtime, '%p %h:%i') as sendtime,
<!-- 			DATE_FORMAT(sendtime, '%Y-%m-%d') as sendtime, -->
			DATE_FORMAT(readtime, '%Y-%m-%d') as readtime,
			readFlag,
			toDelFlag,
			fromDelFlag
        from
            hs_notes
        where 
			dateIdx = #{dateIdx} and idx > #{idx}
        order by
            idx asc 
        limit 
            #{maxRow}
	</select>
	
	<!-- MY목록 크기 -->
    <select id="getMyNoteSize" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(*) from hs_notes 
        where dateIdx = #{dateIdx}
    </select>
    
	<!-- MY목록  -->
    <select id="getMyNoteList" parameterType="java.util.Map" resultType="com.hs.app.note.vo.NoteInfo">
        select 
            idx,			
			msg,
			toUserIdx,
			fromUserIdx,
			DATE_FORMAT(sendtime, '%p %h:%i') as sendtime,
<!-- 			DATE_FORMAT(sendtime, '%Y-%m-%d') as sendtime, -->
			DATE_FORMAT(readtime, '%Y-%m-%d') as readtime,
			readFlag,
			toDelFlag,
			fromDelFlag
        from
            hs_notes
        where 
			dateIdx = #{dateIdx}
        order by
            idx desc 
        limit 
            #{startRow}, #{rowBlockCount}
    </select>
	
	
	<!-- 목록 크기 -->
    <select id="getNoteSize" parameterType="java.util.Map" resultType="java.lang.Integer">
        select count(*) from hs_notes where true 
        <if test="q != null">
            and ( 
	            	msg LIKE CONCAT('%', #{q}, '%')
            	)
        </if>
        <if test="toUserIdx != null">
        	and toUserIdx = #{toUserIdx} 
        </if>
        <if test="fromUserIdx != null">
        	and fromUserIdx = #{fromUserIdx} 
        </if>
    </select>
    
	<!-- 목록  -->
    <select id="getNoteList" parameterType="java.util.Map" resultType="com.hs.app.note.vo.NoteInfo">
        select 
            idx,
			fromUserIdx,
			(select name from hs_user_info where idx = hs_notes.fromUserIdx) as fromUserName,
			toUserIdx,
			(select name from hs_user_info where idx = hs_notes.toUserIdx) as toUserName,
			msg,
			DATE_FORMAT(sendtime, '%Y-%m-%d') as sendtime,
			DATE_FORMAT(readtime, '%Y-%m-%d') as readtime,
			readFlag,
			toDelFlag,
			fromDelFlag
        from
            hs_notes
        where true 
        <if test="q != null">
            and ( 
	            	msg LIKE CONCAT('%', #{q}, '%')
            	)
        </if>
        <if test="toUserIdx != null">
        	and toUserIdx = #{toUserIdx} 
        </if>
        <if test="fromUserIdx != null">
        	and fromUserIdx = #{fromUserIdx}
        </if>
        order by
            idx desc 
        limit 
            #{startRow}, #{rowBlockCount}
    </select>
    
    <!-- 특정 쪽지 가져오기 -->
    <select id="getNote" parameterType="java.lang.Integer" resultType="com.hs.app.note.vo.NoteInfo">
    	select * from hs_notes where idx = #{idx}
    </select>
    
    <!-- 수신자 쪽지 삭제 -->
    <update id="updateToDelFlag" parameterType="java.util.Map">
    	update hs_notes set toDelFlag = #{toDelFlag} where idx = #{idx}
    </update>
    
    <!-- 발신자 쪽지 삭제 -->
    <update id="updateFromDelFlag" parameterType="java.util.Map">
    	update hs_notes set fromDelFlag = #{fromDelFlag} where idx = #{idx}
    </update>
    
  
	<!-- 삭제 -->
	<delete id="deleteNoteByIdx" parameterType="java.lang.Integer">
		delete from hs_notes where idx = #{idx}
	</delete>
	
	<!-- 등록 -->
	<insert id="insertNote" parameterType="com.hs.app.note.vo.NoteInfo">
		insert into hs_notes (dateIdx, fromUserIdx, toUserIdx, msg, sendtime, readtime, readFlag, toDelFlag, fromDelFlag)
		values(#{dateIdx}, #{fromUserIdx}, #{toUserIdx}, #{msg}, now(), now(), false, false, false)
	</insert>
	
	<!-- 읽음 처리 -->
	<update id="updateNoteReadFlag">
		update hs_notes
		set readFlag = true, readtime = now()
		where idx = #{idx} and readFlag = false 
	</update>
	
	
	
	
<!--



create table hs_notes (
	
	idx int(11) unsigned not null auto_increment primary key,
	roomIdx int(11) unsigned not null,
	fromUserIdx int(11) unsigned not null,
	toUserIdx int(11) unsigned not null,
	msg mediumtext null,
	sendtime datetime not null,
	readtime datetime not null,
	readFlag tinyint(1) not null default false,
	toDelFlag tinyint(1) not null default false,
	fromDelFlag tinyint(1) not null default false
	
);

insert into hs_notes (fromUserIdx, toUserIdx, msg, sendtime, readtime, toDelFlag, fromDelFlag, readFlag)
values(1,1,'메세지 내용입니다.',now(), now(), false, false, true);


create table hs_notes_room (
	idx int(11) unsigned not null auto_increment primary key,
	fromUserIdx int(11) unsigned not null,
	toUserIdx int(11) unsigned not null,
	regdate datetime not null
);


select 
	b.idx as idx,
	roomIdx,
	a.fromUserIdx as fromUserIdx,
	a.toUserIdx as toUserIdx,
	b.sendtime as sendtime,
	msg,
	readtime,
	readFlag
from 
	hs_notes_room as a, 
	hs_notes as b 
where 
	a.idx = b.roomIdx
and
	a.toUserIdx = #{toUserIdx} 
order by 
	b.idx desc 
	
	
	
	
select * from 
(
	select 
		b.idx as idx,
		a.idx as roomIdx,
		a.fromUserIdx as fromUserIdx,
		a.toUserIdx as toUserIdx,
		b.sendtime as sendtime,
		msg
	from 
		hs_notes as b,
		hs_notes_room as a
	where 
		a.idx = b.roomIdx
	and
		a.toUserIdx = #{toUserIdx} 
	order by 
		b.idx desc 
) as HS
group by roomIdx
order by idx desc



select 
	b.idx as idx,
	roomIdx,
	a.fromUserIdx as fromUserIdx,
	a.toUserIdx as toUserIdx,
	b.sendtime as sendtime,
	msg,
	readtime,
	readFlag
from 
	hs_notes_room as a, 
	hs_notes as b 
where 
	a.idx = b.roomIdx
order by 
	b.idx desc 
	

	
-->




</mapper>