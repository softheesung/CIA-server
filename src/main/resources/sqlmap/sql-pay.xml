<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//ibatis.apache.org//DTD Mapper 3.0//EN" "http://ibatis.apache.org/dtd/ibatis-3-mapper.dtd"> 
<mapper namespace="pay">
	
	
	
	<select id="getExInfoByIdx" parameterType="java.lang.Integer" resultType="com.hs.app.pay.vo.ExInfo">
		select * from hs_exchange_request where idx = #{idx}
	</select>
	
	<delete id="deleteExchangeByAdmin" parameterType="java.lang.Integer">
		delete from hs_exchange_request where idx = #{idx}
	</delete>
	
	<update id="updateExchangeFlag" parameterType="java.util.Map">
		update hs_exchange_request
		set resultFlag = #{resultFlag}	
		where idx = #{idx}
	</update>
	
	
	<select id="getExchangeSize" resultType="java.lang.Integer">
		select 
			count(*)
		from 	
			hs_exchange_request 
	</select>
	<select id="getExchangeList" parameterType="java.util.Map" resultType="com.hs.app.pay.vo.ExInfo">
		select 
			idx,
			DATE_FORMAT(regdate, '%Y-%m-%d') as regdate,
			amount,
			userIdx,
			resultFlag,
			(select name from hs_user_info where idx = hs_exchange_request.userIdx) as userName,
			ifnull((select amount from hs_user_cash where userIdx = hs_exchange_request.userIdx order by idx desc limit 1),0) as cashPoint,
			
			(select accountBank from hs_user_info where idx = hs_exchange_request.userIdx) as accountBank,
			(select accountHolder from hs_user_info where idx = hs_exchange_request.userIdx) as accountHolder,
			(select accountNumber from hs_user_info where idx = hs_exchange_request.userIdx) as accountNumber
			
			
		from 	
			hs_exchange_request 
		order by
            idx desc 
        limit 
            #{startRow}, #{rowBlockCount}
	</select>
	
	 
	 
	 <delete id="deleteExchange" parameterType="java.lang.Integer">
	 	delete from hs_exchange_request where userIdx = #{userIdx} and resultFlag is null  
	 </delete>
	 
	<select id="getMyExReq" parameterType="java.lang.Integer" resultType="com.hs.app.pay.vo.ExInfo">
		select * from hs_exchange_request 
		where userIdx = #{userIdx} and resultFlag is null 
	</select>
	
	<insert id="insertExchange" parameterType="java.util.Map">
		insert into hs_exchange_request (userIdx, amount, regdate) 
		values(#{userIdx}, #{amount}, now())
	</insert>
	
	<select id="getPaySize" resultType="java.lang.Integer">
		select 
			count(*)
		from 	
			hs_pay 
		where
			sFlag = true 
	</select>
	<select id="getPayList" parameterType="java.util.Map" resultType="com.hs.app.pay.vo.PayInfo">
		select 
			idx,
			DATE_FORMAT(regdate, '%Y-%m-%d') as regdate,
			goodName,
			oid,
			amount,
			userIdx,
			ball,
			sFlag,
			refundFlag
		from 	
			hs_pay 
		where
			sFlag = true 
		order by
            idx desc 
        limit 
            #{startRow}, #{rowBlockCount}
	</select>
	
	
	
	<select id="getPay" parameterType="java.util.Map" resultType="java.util.Map">
		select * from hs_pay where oid = #{oid} and amount = #{amount}
	</select>
	
	<update id="approvalPay" parameterType="java.util.Map">
		update hs_pay set sFlag = true where oid = #{oid} and amount = #{amount}
	</update>
	<insert id="insertPay" parameterType="java.util.Map">
		insert into hs_pay (regdate, goodName, oid, amount, userIdx, refundFlag, ball) 
		values(now(), #{goodName}, #{oid}, #{amount}, #{userIdx}, false, #{ball})
	</insert>
	
	<!-- 전체 회원 포인트 목록 크기 쿼리 -->
	<select id="getAllCashSize" parameterType="java.util.Map" resultType="java.lang.Integer">
		select count(*) from hs_user_cash
		where 
			true
		<if test="userIdx != null">
        	and userIdx = #{userIdx}
        </if>
	</select>
	<!-- 전체 회원 포인트 내역 목록 쿼리 -->
	<select id="getAllCashList" parameterType="java.util.Map" resultType="com.hs.app.pay.vo.CashInfo">
		select 
			idx,
			userIdx,
			DATE_FORMAT(regdate, '%Y-%m-%d') as regdate,
			addPoint,
			usePoint,
			amount, 
			memo,
			(select name from hs_user_info where idx = hs_user_cash.userIdx) as userName
		from	
			hs_user_cash
		where 
			true
		<if test="userIdx != null">
        	and userIdx = #{userIdx}
        </if>
		order by 
			idx desc 
		limit
			 #{startRow}, #{rowBlockCount}
	</select>
	
	<!-- 포인트 정보 등록 (포인트 증가 또는 감소) -->
	<insert id="insertCashInfo" parameterType="com.hs.app.pay.vo.CashInfo">
		insert into hs_user_cash
			(userIdx, regdate, addPoint, usePoint, amount, memo)
		values
			(#{userIdx}, now(), #{addPoint}, #{usePoint}, #{amount}, #{memo})
	</insert>
	
	
	<!--  -->
	
	
	
<!--




insert int hs_pay (regdate, goodName, oid, amount, userIdx, refundFlag) 
values(now(), #{goodName}, #{oid}, #{amount}, #{userIdx}, #{refundFlag})


create table hs_pay (
	
	idx int(11) unsigned not null auto_increment primary key,
	regdate datetime not null,
	goodName text null,
	oid text not null,
	amount int(11) unsigned not null,
	userIdx int(11) unsigned not null,
	ball int(11) unsigned not null,
	sFlag tinyint(1) not null default false,
	refundFlag tinyint(1) not null default false

);

create table hs_user_cash (
	
	idx int(11) unsigned not null auto_increment primary key,
	userIdx int(11) unsigned not null,
	regdate datetime not null,
	addPoint int(11) unsigned not null default 0,
	usePoint int(11) unsigned not null default 0,
	amount int(11) unsigned not null,
	memo text null
);

insert into hs_user_cash (userIdx, regdate, addPoint, amount, memo) 
values(1, now(), 50000, 50000, 'Test');


cash&pay
matching_request



create table edun_cooperate_sale_link (
	seq int(11) unsigned not null auto_increment primary key,
	lectureseq int(11) unsigned not null,
	salePercent int(11) unsigned not null,
	sellerseq int(11) unsigned not null,
		
);




create table edun_curriculum_comment_like (
	seq int(11) unsigned not null auto_increment primary key,
	commentseq  int(11) unsigned not null,
	userseq int(11) unsigned not null,
	regdate datetime not null default now()
);


# 좋아요 등록
insert into edun_curriculum_comment_like (commentseq, userseq, regdate) values(#{commentseq}, #{userseq}, now());
# 이미 좋아요 누른 적이 있는지 여부
select count(*) from edun_curriculum_comment_like where commentseq = #{commentseq} and userseq = #{userseq}
# 좋아요 삭제 
delete from edun_curriculum_comment_like where commentseq = #{commentseq} and userseq = #{userseq}



create table hs_exchange_request (
	
	idx int(11) unsigned not null auto_increment primary key,
	userIdx int(11) unsigned not null,
	amount int(11) unsigned not null,
	regdate datetime not null,
	resultFlag tinyint(1) null

);

-->
	



</mapper>